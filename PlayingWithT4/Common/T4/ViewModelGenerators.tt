<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>



<#@ assembly name="$(TargetDir)ServiceModel.dll" #>
<#@ import namespace="ServiceModel.Models" #>
<#@ include file="TemplateFileManagerV2.1.ttinclude" #>
<#@ import namespace="System.Reflection" #>


<#
   string Greeting = "Hello";
   string SampleInputFileContent 
    =  @"<Model>
        <Table name=""Rain""><Column name=""Night""/><Column name=""Day""/></Table>
        <Table name=""Temperatur""><Column name=""Night""/><Column name=""Day""/></Table>
        </Model>";
    // Certainly you would normally load the model data from a file using 
    // the relative path of the template as shown below:
    // string SampleInputFileContent = System.IO.File.ReadAllText( 
    // System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\datafile.xml");  	
#>

<#
var entitiesNamespace = "ServiceModel.Models";
var fileManager = TemplateFileManager.Create(this);
var entitiesAssembly = "ServiceModel.dll";
var typesToRegister = 
    from t in Assembly.LoadFrom(@"C:\Users\Erick Asto\Documents\DEV\UCSP\CI\testprojects\PlayingWithT4\ServiceModel\LibForT4\ServiceModel.dll").GetExportedTypes()
    where t.Namespace == entitiesNamespace && t.IsClass && !t.IsAbstract
    select t;

foreach (var type in typesToRegister.Where(t => t.IsClass && !t.IsAbstract))
{
   fileManager.StartNewFile(String.Format("{0}.cs",type.Name));
#>
using System;

namespace ACustomNamespace
{
    //Some Content Here
    public partial class <#= type.Name #>
    {
<# 
		foreach(var iProperty in type.GetProperties())
        {
			//var methodInfo = iProperty.GetGetMethod(true);
			
            if (iProperty.GetGetMethod(true).IsPublic)
            {
#>
        public <#= iProperty.PropertyType.Name #> <#= iProperty.Name #> { get; set; }
<#		 
            }

        }
#>
    }
}
<#
}
fileManager.Process();
#>

// This is the output code from your template
// you only get syntax-highlighting here - not intellisense
namespace MyNameSpace{
  class MyFirstGeneratedClass{
     public static void main (string[] args ){
       System.Console.WriteLine("<#= Greeting #>, the time is now: <#= System.DateTime.Now.ToString() #>");
       <# getWeatherDataCodeGen(SampleInputFileContent); #>     
     }
  static string GetDataForTable(string table){
     // TODO - will be implemented later...
     return "HA HA JA JA....";
    }
  }
}
 
<#+  
  // Insert any template procedures here
    Assembly LoadFromFile(string relativePath)
    {
        string finalPath = System.IO.Path.Combine(@"C:\Users\Erick Asto\Documents\DEV\UCSP\CI\testprojects\PlayingWithT4\ServiceModel\LibForT4", relativePath);
        //string finalPath = System.IO.Path.Combine(@"C:\Users\Erick Asto\Documents\DEV\UCSP\CI\testprojects\PlayingWithT4\PlayingWithT4.Reflection\bin\Debug\", relativePath);
        return Assembly.LoadFile(finalPath);
    }

  void getWeatherDataCodeGen(string Input) {
    System.Xml.Linq.XDocument XmlDoc = System.Xml.Linq.XDocument.Parse(Input);
    
    
    var Tables = from c in XmlDoc.Descendants("Table") 
                 select new {Name = c.Attribute("name").Value, Table = c};

    foreach (var aTable in Tables) {
    #>
     System.Console.Write(GetDataForTable("<#= aTable.Name #>"));
    <#+
    }
    
  }
#>