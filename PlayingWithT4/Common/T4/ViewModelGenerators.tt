<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>

<# //We are starting #>
<#@ assembly name="$(TargetDir)ServiceModel.dll" #>
<#@ import namespace="ServiceModel.Models" #>
<#@ include file="TemplateFileManagerV2.1.ttinclude" #>


<#
   string Greeting = "Hello";
   string SampleInputFileContent 
    =  @"<Model>
        <Table name=""Rain""><Column name=""Night""/><Column name=""Day""/></Table>
        <Table name=""Temperatur""><Column name=""Night""/><Column name=""Day""/></Table>
        </Model>";	 
    // Certainly you would normally load the model data from a file using 
    // the relative path of the template as shown below:
    // string SampleInputFileContent = System.IO.File.ReadAllText( 
    // System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\datafile.xml");  	
#>


<#
var entitiesNamespace = "ServiceModel.Models";
var fileManager = TemplateFileManager.Create(this);
var entitiesAssembly = "$(TargetDir)ServiceModel.dll";
var typesToRegister = 
    from t in Assembly.LoadFile(entitiesAssembly).GetExportedTypes()
    where t.Namespace == entitiesNamespace && t.IsClass && !t.IsAbstract
    select t;


fileManager.StartNewFile("ANewFile1.txt");
#>
//A new file1

<#
fileManager.StartNewFile("ANewFile2.txt");
#>
//This is another file

<#
fileManager.Process();
#>

// This is the output code from your template
// you only get syntax-highlighting here - not intellisense
namespace MyNameSpace{
  class MyFirstGeneratedClass{
     public static void main (string[] args ){
       System.Console.WriteLine("<#= Greeting #>, the time is now: <#= System.DateTime.Now.ToString() #>");
       <# getWeatherDataCodeGen(SampleInputFileContent); #>     
     }
  static string GetDataForTable(string table){
     // TODO - will be implemented later...
     return "HA HA JA JA....";
    }
  }
}
 
<#+  
  // Insert any template procedures here
  void getWeatherDataCodeGen(string Input) {
    System.Xml.Linq.XDocument XmlDoc = System.Xml.Linq.XDocument.Parse(Input);
    
    
    var Tables = from c in XmlDoc.Descendants("Table") 
                 select new {Name = c.Attribute("name").Value, Table = c};

    foreach (var aTable in Tables) {
    #>
     System.Console.Write(GetDataForTable("<#= aTable.Name #>"));
    <#+
    }
    
  }
#>